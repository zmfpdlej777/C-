1. 객체지향프로그래밍(OOP)
- 객체 중심의 프로그래밍 방식																		|
- 객체 끼리의 상호작용을 통해 프로그램을 만드는 방식												|
																								|
 1-1 OOP의 요소																					|
 - 부품화 : 하위 class들의 멤버 변수나, 함수를 부품처럼 사용하는 것									|
 - 캡슐화 = class																				|
 - 정보은닉 : 멤버를 보호하기 위해서 외부로부터 접근을 제한하는 것, 프로그램의 안정적 구현과 연관		|
 - 상속 : class끼리 물려주거나, 물려 받는 것.														|
 - 다형성 : 다양한 형태나 성질, 하나의 class를 다양한 형태로 표현하는 것								|
------------------------------------------------------------------------------------------------|
																								|
2. 객체(Object)																					|
- 사전적인 의미 : 현실세계에 존재하는 모든것. 객관적인 개념체들										|
- 프로그램 : 대상의 정보를 저장하는 공간(Data)과 대상을 제어할 수 있는 기능(함수)을					|
  하나의 루틴으로 묶어서 만들어지는 개별적인 개체로 표현되는 변수										|
- class()라는 사용자 정의 자료형으로 만든 변수														|
------------------------------------------------------------------------------------------------|

3. 클래스(Class) <<
- 대상의 속성과 그 대상을 제어할 수 있는 기능이 하나로 묶여서 정의된 사용자 정의 자료형
- 구조체에서 발전된 자료형

 3-1 Class의 구성요소
 - Data + 기능 + 보안(정보은닉)
 - Data = 멤버변수
 - 기능 = 멤버함수
 - 보안 = 접근 지정자

 3-2 상세형식
 class 클래스명{
	1) 자료형 멤버변수 : class에 저장되는 데이터(ex.변수,배열,구조체..)
	2) 반환형 멤버함수(매개변수) : class의 기능
       -생성자 : 클래스 객체 생성시, 자동으로 호출되는 멤버 함수. ≒'초기 객체 설정'
	   -소멸자 : 클래스 객체 소멸시, 자동으로 호출되는 멤버 함수. ≒'객체 정리'
	   -getta : 멤버 변수의 값을 반환하는 멤버함수
	   -setta : 멤버 변수의 값을 변경하는 멤버함수
	   -연산자 오버로드 : 연산자의 새로운 기능을 부여하는 멤버함수
	   -user 함수 : 사용자 필요에 의해 만들어지는 멤버함수
}
 3-3 접근 지정자
	1) class 멤버를 보호하기 위해서 단계적으로 접근을 제한할 수 있는 키워드
    2) 종류
	   -private	  : class 내부에서만 접근 가능, (C의 경우 default)
			*별다른 제약이 없다면 일반적으로 멤버 변수는 private*
	   -protected : 상속해준 자식에서는 접근 가능, 외부는 모두 접근 불가
	   -public	  : class 내부와 외부 모두 접근 가능
			*별다른 제약이 없다면 일반적으로 멤버 변수는 public*