#include<stdio.h>

int main(void) {

		//문자체계
	// - 컴퓨터에서 문자를 처리하기위해서 만들어지는 체계
	// - 문자 마다 고유한 번호를 붙여서 저장하거나 사용할때 정수값을 이용한다.
	// - 아스키 코드 , 유니코드..

		// - 아스키코드
	//  - 0 ~ 127까지 총 128가지의 문자를 처리한 문자 체계
	//  - 공백문자 , 제어문자 , 영문자 , 숫자 , 특수문자 등이 포함되어 있다.
	//  - 키보드의 키값
	//  - C계열의 언어에서는 기본 문자형식으로 처리된다.


		// - 유니코드
	//  - 아스키코드 + 이세상의 모든 문자 약 6만개
	//  - 현재 가장 널리쓰이고 있는 문자 체계중에 하나이다.
	//  - JAVA , 파이썬에서의 기본 문자형식


		//문자열
	// - 모든 프로그래밍 언어 에서는 문장을 문자열이라 부른다.
	// - 문자열을 처리할때는 ""를 사용한다.
	// - 문자열을 담당하고 잇는 서식문자는 %s이다.

	// - C언어 에서는 문자열을 담당하는 자료형이 존재하지 않는다.
	// - 문자열을 저장하고 관리하기 위해서 char형 배열을 이용한다.
	// - 아스키코드 내부의 문자 - 1byte
	// - 아스키코드 외부의 문자 - 2byte
	// - 문자열의 끝을 표현하기위해서 가장 마지막에 자동으로 NULL문자가 삽입된다.

		//Buffer
	// - 데이터의 처리 속도 , 단위 , 시간등이 서로 다른 두 장치나 프로그램사이에서 데이터를
	//   주고 받기 위한 용도로 사용되는 임시기억장소

	//키보드 입력시에 버퍼..
	// - 키보드에서 입력된 값들이 저장된다.
	// - 공백 문자를 기준으로 데이터를 구분한다.
	// - 정수 실수 문자열은 첫번째 공백문자를 무시한다.
	// - 문자는 아스키코드 때문에 첫번째 공백문자도 문자로 인식한다.
	// - *어떠한 데이터를 입력한 후에는 버퍼에서 공백문자를 제거해주어야 한다. -> getchar()로 buffer에 남음 \n을 가져가 buffer을 비워주도록 하자

	// USB 또는 외장하드

	char str[20] = "USB 또는 외장하드!!";

	printf("%s\n", str);

	//%s - 시작주소로부터  NULL문자까지의 데이터를 읽어오는 서식문자

	//배열명은 배열의 시작주소값을 뜻한다..배열의 시작주소값을 가지는 포인터형 상수
	//항상 모든 공간의 주소값은 그 공간의 시작주소값이다.
	//모든 문자열은 주소값을 통하여 데이터가 관리된다.

	printf("%p\n", str);
	printf("%p\n", &str);
	printf("%p\n", "USB 또는 외장하드!!");

	//*gets_s(입력받을 공간의 주소, 입력받을 공간의 크기);
// - 문자열을 입력받는 표준 입력 함수
// - 공백문자를 기준으로 데이터를 구분짓는 것이 아니라...
//   오직 \n를 기준으로 데이터를 구분한다...
	char name[20];
	gets_s(name, sizeof(name));



	//int a = 10;

	//printf("%p", &a);

	return 0;
}