#include<iostream>
using namespace std;
//프로그램 운용중의 메모리 구조
//1. Code : 기계어로 변역된 코드가 저장되는 영역 = 함수가 정의되어 있는 영역. *this

//2. Data : 전역 변수 및 스태틱 변수가 저장되는 영역
// - 프로그램 실행 중에 공간이 생성되고, 프로그램이 끝날 때 공간이 소멸
// - 때문에 우리가 공간의 생성 및 소멸 시기를 결정할 수 없다.
// *스태틱 : 소속이있는 전역변수

//3. Stack
// - 지역변수 및 매개변수가 저장되는 영역, 함수의 호출 및 종료를 담당하는 영역
// - 지역이 실행할때 공간이 생성, 지역이 끝날 때 공간 소멸 =>때문에  생성, 소멸시기를 결정할 수없다.

//4. Heap
// - 프로그램 운용 중에 사용자 필요에 의해서 공간을 생성하고 소멸시킬 수 있는 영역
// => 때문에 직접 공간의 생성 및 소멸시기를 결정할 수 있는 영역. *동적할당이 이루어지는 영역

int main(void) {
	//동적할당
	// - 프로그램 운용 중에 사용자 필요에 의해서 공간을 생성하고 소멸시키는 작업
	// - 동적할당된 공간은 포인터를 통하여 제어해야 한다.
	// - C표준 함수를 이용한다(ex.malloc-free)
	// - C++는 new와 delete라는 키워드를 이용하여 동적할당을 이용
	// - 동적할당된 공간은 반드시 사용 후에는 처리해제를 해주어야 한다.

	//*동적할당 생성 - new
	// - C++에서 new를 사용하면 자동으로 malloc함수와 연결되어 사용된다.
	// - 일반 변수 형태 : new 자료형;
	// - 배열 형태	   : new 자료형[갯수];

	//*동적할당 제거 - delete
	// - C++에서 delete를 사용하면 자동으로 free함수와 연결
	// - 일반 변수 형태 : delete 해체할공간의 주소
	// - 배열 형태	   : delete[] 해체할공간의 주소

	int* pt = new int;
	cout << pt << endl;  //주소값 반환됨
	*pt = 20;			 //주소에 20넣음
	cout << *pt << endl; //주소에 있는 값 반환
	delete pt;

	pt = new int[5];
	cout << "동적 할당 배열 : ";
	for (int i = 0; i < 5; i++) {
		pt[i] = i + 1;
		cout << pt[i] << " ";
	}
	cout << endl;
	delete[] pt; //꼭 배열삭제시 대괄호 쳐줘야함. 안하면 무한루프 할수도 

	return 0;
}