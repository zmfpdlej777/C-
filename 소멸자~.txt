 3-7 콜른 초기화(*복습!)
  - 생성자에서만 사용되는 초기화 방식
  - 선언과 동시에 초기화
  - C++용 초기화 스타일을 이용해 초기화를 해야 한다.
  - 형식 : 클래스명(매개변수...):멤버변수명(매개변수or상수)...{코드 정의;}

  3-8 소멸자 (*동적할당시 무조건 따라오는 함수)
  - 객체 소멸시 무조건 자동으로 호출되는 멤버 함수
  - 객체 소멸 과정 : 소멸자 호출 -> 공간 반환
  - 객체 정리
   *이유 : 객체 소멸시 클래스 내부에서 만들어진 동적할당된 공간은 소멸되지 않는다.
   *목적 : 소멸자를 통해서 동적할당된 공간을 해제 처리해주어야 한다.
  - 형식 : ~Class() {코드 정의;}
   *void
   *클래스명과 동일 but 생성자와 구별하기 위해 ~을 앞에 붙여준다.
   *매개변수를 가질 수 없다. = 오버로드 불가 = 클래스 내부에 단 하나만 만들어지는 멤버 함수
   
  3-9 복사 생성자(*동적할당시 무조건 따라오는 함수2)
  - 우리가 정의하지 않으면 자동으로 만들어진다.
  - 같은 타입의 레퍼런스 변수를 매개변수로 하는 생성자
  - 새로운 객체를 기존 객체로 초기화할때 사용되는 멤버 함수
  - 방식 : 비트단위로 복사 => 동적할당의 경우 주소값을 복사, 때문에 기존의 객체에 동적할당된 멤버변수 주소를 동일히 가르킴
   => 기존 객체가 소멸자로 소멸될때, 복사체는 동적할당된 변수를 찾을수 없어 error
  - 얕은 복사 : 객체를 비트 단위로 복사하면서, 단순하게 동적할당된  멤버변수의 주소만을 복사 (*주의사항: '방식' 참고)
  - 깊은 복사 : 객체를 비트 단위로 복사하는게 아니라, 동적할당된 공간에 실제 데이터를 복사하는 형태.
  - 형식 : 기존 생성자 형식과 동일. But 매개변수는 같은 타입의 레퍼런스 변수
   ex) Person(const p& ref){}
  - 쓰임새 : 새로운 객체를 기존 객체로 초기화 시킬 경우 / 함수의 매개변수가 객체인 경우 / 함수의 반환값이 객체인 경우
  [TIP]기존 객체를 가지고 이용만 해야 한다면 멤버 함수의 매개변수에 래퍼런스 변수로 넣어주면 메모리 소모값을 줄일수 있다.